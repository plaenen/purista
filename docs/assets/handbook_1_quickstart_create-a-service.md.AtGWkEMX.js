import{_ as e,c as s,o as a,V as i,a8 as t}from"./chunks/framework.ITQiifkM.js";const g=JSON.parse('{"title":"Create a Service","description":"Create the first PURISTA service","frontmatter":{"title":"Create a Service","description":"Create the first PURISTA service","order":103000,"image":"/graphic/add_service.png"},"headers":[],"relativePath":"handbook/1_quickstart/create-a-service.md","filePath":"handbook/1_quickstart/create-a-service.md","lastUpdated":1706444636000}'),r={name:"handbook/1_quickstart/create-a-service.md"},n=i('<h1 id="create-the-first-service" tabindex="-1">Create the first service <a class="header-anchor" href="#create-the-first-service" aria-label="Permalink to &quot;Create the first service&quot;">​</a></h1><p><img src="'+t+'" alt="Add service with cli"></p><p>A service is a logical group of functions and subscriptions. This is where the domain driven aspect comes in. In our example, we will use the classic example - Users.</p><p>At the end, we want to have two domains - <em>User</em> and <em>Email</em>.</p><p>We will need to have this functionality:</p><ul><li>sign up a new user</li><li>get a user by email</li><li>send a welcome email to user</li></ul><h2 id="set-up-a-new-service" tabindex="-1">Set up a new service <a class="header-anchor" href="#set-up-a-new-service" aria-label="Permalink to &quot;Set up a new service&quot;">​</a></h2><p>First, we need to create a new service. You can simply add a new service by using the CLI tool.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purista</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add service</span></span></code></pre></div><p>The CLI will guide you through all steps, and will create all files for your. In the first step, you will asked for the name of our new service. We will start with <em>User</em>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> What is the name (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) of your new service (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">something</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> like: user or account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Service names should be short and in best case a single word - like user or email. They should reflect a single entity or domain name. You can enter the name in natural way. The CLI tool will take care of casing and whitespaces. For example, if you have a domain <em>bank account</em>, you can simply type in <em>bank account</em>. The CLI tool will convert it to something like <em>bankAccount</em></p></div><p>After you have confirm your input by pressing the enter key, you will be asked for a short description of the service.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> What is the matter of service </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span></span></code></pre></div><p>Here, you should enter some short, general description, which will be used for some human-facing documentation. So, please provide here something like: <em>manages data related to users</em>.</p><p>In the last step, you will be asked for the version of your service. It defaults to <em>1</em>, which you can simply confirm by pressing the enter key. If you need to create a new version of an existing service, you can enter any integer number larger than <em>1</em>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number of this service </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Now, all files should be generated.</p><h2 id="start-the-service" tabindex="-1">Start the service <a class="header-anchor" href="#start-the-service" aria-label="Permalink to &quot;Start the service&quot;">​</a></h2>',19),l=[n];function o(h,c,p,d,u,k){return a(),s("div",null,l)}const v=e(r,[["render",o]]);export{g as __pageData,v as default};
