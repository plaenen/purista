import{_ as e,c as o,o as d,V as c}from"./chunks/framework.ITQiifkM.js";const g=JSON.parse('{"title":"Class: CommandDefinitionBuilder<ServiceClassType, MessagePayloadType, MessageParamsType, MessageResultType, PayloadSchema, ParameterSchema, ResultSchema, Invokes, EmitListType>","description":"","frontmatter":{},"headers":[],"relativePath":"api/classes/purista_core.CommandDefinitionBuilder.md","filePath":"api/classes/purista_core.CommandDefinitionBuilder.md","lastUpdated":1708221737000}'),t={name:"api/classes/purista_core.CommandDefinitionBuilder.md"},a=c(`<p><a href="./../README.html">PURISTA API</a> / <a href="./../modules.html">Modules</a> / <a href="./../modules/purista_core.html">@purista/core</a> / CommandDefinitionBuilder</p><h1 id="class-commanddefinitionbuilder-serviceclasstype-messagepayloadtype-messageparamstype-messageresulttype-payloadschema-parameterschema-resultschema-invokes-emitlisttype" tabindex="-1">Class: CommandDefinitionBuilder&lt;ServiceClassType, MessagePayloadType, MessageParamsType, MessageResultType, PayloadSchema, ParameterSchema, ResultSchema, Invokes, EmitListType&gt; <a class="header-anchor" href="#class-commanddefinitionbuilder-serviceclasstype-messagepayloadtype-messageparamstype-messageresulttype-payloadschema-parameterschema-resultschema-invokes-emitlisttype" aria-label="Permalink to &quot;Class: CommandDefinitionBuilder\\&lt;ServiceClassType, MessagePayloadType, MessageParamsType, MessageResultType, PayloadSchema, ParameterSchema, ResultSchema, Invokes, EmitListType\\&gt;&quot;">​</a></h1><p><a href="./../modules/purista_core.html">@purista/core</a>.CommandDefinitionBuilder</p><p>Command definition builder is a helper to create and define a command for a service. It helps to set all needed information like schemas and hooks. With these information, the types are automatically set and extended.</p><p>A working schema definition needs at least a command name, a short description and the function implementation.</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ServiceClassType</code></td><td style="text-align:left;">extends <a href="./../interfaces/purista_core.ServiceClass.html"><code>ServiceClass</code></a></td></tr><tr><td style="text-align:left;"><code>MessagePayloadType</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>MessageParamsType</code></td><td style="text-align:left;">{}</td></tr><tr><td style="text-align:left;"><code>MessageResultType</code></td><td style="text-align:left;"><code>void</code></td></tr><tr><td style="text-align:left;"><code>PayloadSchema</code></td><td style="text-align:left;">extends <code>Schema</code> = <code>ZodAny</code></td></tr><tr><td style="text-align:left;"><code>ParameterSchema</code></td><td style="text-align:left;">extends <code>Schema</code> = <code>ZodAny</code></td></tr><tr><td style="text-align:left;"><code>ResultSchema</code></td><td style="text-align:left;">extends <code>Schema</code> = <code>ZodAny</code></td></tr><tr><td style="text-align:left;"><code>Invokes</code></td><td style="text-align:left;">{}</td></tr><tr><td style="text-align:left;"><code>EmitListType</code></td><td style="text-align:left;">{}</td></tr></tbody></table><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h3><ul><li><a href="./purista_core.CommandDefinitionBuilder.html#constructor">constructor</a></li></ul><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h3><ul><li><a href="./purista_core.CommandDefinitionBuilder.html#autoacknowledge">autoacknowledge</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#commanddescription">commandDescription</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#commandname">commandName</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#deprecated">deprecated</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#durable">durable</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#emitlist">emitList</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#errorstatuscodes">errorStatusCodes</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#eventname">eventName</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#fn">fn</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#hooks">hooks</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#httpmetadata">httpMetadata</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#inputcontentencoding">inputContentEncoding</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#inputcontenttype">inputContentType</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#inputschema">inputSchema</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#invokes">invokes</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#issecure">isSecure</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#operationid">operationId</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#outputcontentencoding">outputContentEncoding</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#outputcontenttype">outputContentType</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#outputschema">outputSchema</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#parameterschema">parameterSchema</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#queryparameter">queryParameter</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#summary">summary</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#tags">tags</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><ul><li><a href="./purista_core.CommandDefinitionBuilder.html#addopenapierrorstatuscodes">addOpenApiErrorStatusCodes</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#addopenapitags">addOpenApiTags</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#addoutputschema">addOutputSchema</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#addparameterschema">addParameterSchema</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#addpayloadschema">addPayloadSchema</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#addqueryparameters">addQueryParameters</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#adviceautoacknowledgemessages">adviceAutoacknowledgeMessages</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#canemit">canEmit</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#caninvoke">canInvoke</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#disablehttpsecurity">disableHttpSecurity</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#enablehttpsecurity">enableHttpSecurity</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#exposeashttpendpoint">exposeAsHttpEndpoint</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#extendwithhttpmetadata">extendWithHttpMetadata</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#getcommandcontextmock">getCommandContextMock</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#getcommandfunction">getCommandFunction</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#getcommandfunctionplain">getCommandFunctionPlain</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#getcommandtransformcontextmock">getCommandTransformContextMock</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#getdefinition">getDefinition</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#gettransforminputfunction">getTransformInputFunction</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#gettransformoutputfunction">getTransformOutputFunction</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#markasdeprecated">markAsDeprecated</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#setafterguardhooks">setAfterGuardHooks</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#setbeforeguardhooks">setBeforeGuardHooks</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#setcommandfunction">setCommandFunction</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#setopenapioperationid">setOpenApiOperationId</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#setopenapisummary">setOpenApiSummary</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#setsuccesseventname">setSuccessEventName</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#settransforminput">setTransformInput</a></li><li><a href="./purista_core.CommandDefinitionBuilder.html#settransformoutput">setTransformOutput</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new CommandDefinitionBuilder</strong>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;(<code>commandName</code>, <code>commandDescription</code>, <code>eventName?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><h4 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ServiceClassType</code></td><td style="text-align:left;">extends <a href="./../interfaces/purista_core.ServiceClass.html"><code>ServiceClass</code></a>&lt;<code>unknown</code>&gt;</td></tr><tr><td style="text-align:left;"><code>MessagePayloadType</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>MessageParamsType</code></td><td style="text-align:left;">{}</td></tr><tr><td style="text-align:left;"><code>MessageResultType</code></td><td style="text-align:left;"><code>void</code></td></tr><tr><td style="text-align:left;"><code>PayloadSchema</code></td><td style="text-align:left;">extends <code>Schema</code> = <code>ZodAny</code></td></tr><tr><td style="text-align:left;"><code>ParameterSchema</code></td><td style="text-align:left;">extends <code>Schema</code> = <code>ZodAny</code></td></tr><tr><td style="text-align:left;"><code>ResultSchema</code></td><td style="text-align:left;">extends <code>Schema</code> = <code>ZodAny</code></td></tr><tr><td style="text-align:left;"><code>Invokes</code></td><td style="text-align:left;">{}</td></tr><tr><td style="text-align:left;"><code>EmitListType</code></td><td style="text-align:left;">{}</td></tr></tbody></table><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>commandName</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>commandDescription</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>eventName?</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L135" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:135</a></p><h2 id="properties-1" tabindex="-1">Properties <a class="header-anchor" href="#properties-1" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="autoacknowledge" tabindex="-1">autoacknowledge <a class="header-anchor" href="#autoacknowledge" aria-label="Permalink to &quot;autoacknowledge&quot;">​</a></h3><p>• <code>Private</code> <strong>autoacknowledge</strong>: <code>boolean</code> = <code>true</code></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L72" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:72</a></p><hr><h3 id="commanddescription" tabindex="-1">commandDescription <a class="header-anchor" href="#commanddescription" aria-label="Permalink to &quot;commandDescription&quot;">​</a></h3><p>• <code>Private</code> <strong>commandDescription</strong>: <code>string</code></p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L137" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:137</a></p><hr><h3 id="commandname" tabindex="-1">commandName <a class="header-anchor" href="#commandname" aria-label="Permalink to &quot;commandName&quot;">​</a></h3><p>• <code>Private</code> <strong>commandName</strong>: <code>string</code></p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L136" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:136</a></p><hr><h3 id="deprecated" tabindex="-1">deprecated <a class="header-anchor" href="#deprecated" aria-label="Permalink to &quot;deprecated&quot;">​</a></h3><p>• <code>Private</code> <strong>deprecated</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L61" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:61</a></p><hr><h3 id="durable" tabindex="-1">durable <a class="header-anchor" href="#durable" aria-label="Permalink to &quot;durable&quot;">​</a></h3><p>• <code>Private</code> <strong>durable</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L71" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:71</a></p><hr><h3 id="emitlist" tabindex="-1">emitList <a class="header-anchor" href="#emitlist" aria-label="Permalink to &quot;emitList&quot;">​</a></h3><p>• <code>Private</code> <strong>emitList</strong>: <code>EmitListType</code></p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L79" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:79</a></p><hr><h3 id="errorstatuscodes" tabindex="-1">errorStatusCodes <a class="header-anchor" href="#errorstatuscodes" aria-label="Permalink to &quot;errorStatusCodes&quot;">​</a></h3><p>• <code>Private</code> <strong>errorStatusCodes</strong>: <a href="./../enums/purista_core.StatusCode.html"><code>StatusCode</code></a>[] = <code>[]</code></p><h4 id="defined-in-7" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-7" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L65" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:65</a></p><hr><h3 id="eventname" tabindex="-1">eventName <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>eventName</strong>: <code>string</code></p><h4 id="defined-in-8" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-8" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L138" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:138</a></p><hr><h3 id="fn" tabindex="-1">fn <a class="header-anchor" href="#fn" aria-label="Permalink to &quot;fn&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>fn</strong>: <a href="./../modules/purista_core.html#commandfunction"><code>CommandFunction</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><h4 id="defined-in-9" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-9" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L123" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:123</a></p><hr><h3 id="hooks" tabindex="-1">hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;hooks&quot;">​</a></h3><p>• <code>Private</code> <strong>hooks</strong>: <code>Object</code></p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>afterGuard</code></td><td style="text-align:left;"><code>Record</code>&lt;<code>string</code>, <a href="./../modules/purista_core.html#commandafterguardhook"><code>CommandAfterGuardHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>Infer</code>&lt;<code>ResultSchema</code>&gt;, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</td></tr><tr><td style="text-align:left;"><code>beforeGuard</code></td><td style="text-align:left;"><code>Record</code>&lt;<code>string</code>, <a href="./../modules/purista_core.html#commandbeforeguardhook"><code>CommandBeforeGuardHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</td></tr><tr><td style="text-align:left;"><code>transformInput?</code></td><td style="text-align:left;">{ <code>transformFunction</code>: <a href="./../modules/purista_core.html#commandtransforminputhook"><code>CommandTransformInputHook</code></a>&lt;<code>ServiceClassType</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>&gt; ; <code>transformInputSchema</code>: <code>Schema</code> ; <code>transformParameterSchema</code>: <code>Schema</code> }</td></tr><tr><td style="text-align:left;"><code>transformInput.transformFunction</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#commandtransforminputhook"><code>CommandTransformInputHook</code></a>&lt;<code>ServiceClassType</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>transformInput.transformInputSchema</code></td><td style="text-align:left;"><code>Schema</code></td></tr><tr><td style="text-align:left;"><code>transformInput.transformParameterSchema</code></td><td style="text-align:left;"><code>Schema</code></td></tr><tr><td style="text-align:left;"><code>transformOutput?</code></td><td style="text-align:left;">{ <code>transformFunction</code>: <a href="./../modules/purista_core.html#commandtransformoutputhook"><code>CommandTransformOutputHook</code></a>&lt;<code>ServiceClassType</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>&gt; ; <code>transformOutputSchema</code>: <code>Schema</code> }</td></tr><tr><td style="text-align:left;"><code>transformOutput.transformFunction</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#commandtransformoutputhook"><code>CommandTransformOutputHook</code></a>&lt;<code>ServiceClassType</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>transformOutput.transformOutputSchema</code></td><td style="text-align:left;"><code>Schema</code></td></tr></tbody></table><h4 id="defined-in-10" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-10" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L81" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:81</a></p><hr><h3 id="httpmetadata" tabindex="-1">httpMetadata <a class="header-anchor" href="#httpmetadata" aria-label="Permalink to &quot;httpMetadata&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>httpMetadata</strong>: <code>Object</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>expose</code></td><td style="text-align:left;">{ <code>contentEncodingRequest?</code>: <code>string</code> ; <code>contentEncodingResponse?</code>: <code>string</code> ; <code>contentTypeRequest?</code>: <code>string</code> ; <code>contentTypeResponse?</code>: <code>string</code> ; <code>deprecated?</code>: <code>boolean</code> ; <code>inputPayload?</code>: <code>SchemaObject</code> ; <code>outputPayload?</code>: <code>SchemaObject</code> ; <code>parameter?</code>: <code>SchemaObject</code> } &amp; { <code>http</code>: { <code>method</code>: <code>&quot;GET&quot;</code> | <code>&quot;POST&quot;</code> | <code>&quot;PATCH&quot;</code> | <code>&quot;PUT&quot;</code> | <code>&quot;DELETE&quot;</code> ; <code>openApi?</code>: { <code>additionalStatusCodes?</code>: <a href="./../enums/purista_core.StatusCode.html"><code>StatusCode</code></a>[] ; <code>description</code>: <code>string</code> ; <code>isSecure</code>: <code>boolean</code> ; <code>operationId?</code>: <code>string</code> ; <code>query?</code>: <a href="./../modules/purista_core.html#queryparameter"><code>QueryParameter</code></a>&lt;<code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;[] ; <code>summary</code>: <code>string</code> ; <code>tags?</code>: <code>string</code>[] } ; <code>path</code>: <code>string</code> } }</td></tr></tbody></table><h4 id="defined-in-11" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-11" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L49" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:49</a></p><hr><h3 id="inputcontentencoding" tabindex="-1">inputContentEncoding <a class="header-anchor" href="#inputcontentencoding" aria-label="Permalink to &quot;inputContentEncoding&quot;">​</a></h3><p>• <code>Private</code> <strong>inputContentEncoding</strong>: <code>undefined</code> | <code>string</code></p><h4 id="defined-in-12" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-12" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L52" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:52</a></p><hr><h3 id="inputcontenttype" tabindex="-1">inputContentType <a class="header-anchor" href="#inputcontenttype" aria-label="Permalink to &quot;inputContentType&quot;">​</a></h3><p>• <code>Private</code> <strong>inputContentType</strong>: <code>undefined</code> | <code>string</code></p><h4 id="defined-in-13" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-13" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L51" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:51</a></p><hr><h3 id="inputschema" tabindex="-1">inputSchema <a class="header-anchor" href="#inputschema" aria-label="Permalink to &quot;inputSchema&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>inputSchema</strong>: <code>PayloadSchema</code></p><h4 id="defined-in-14" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-14" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L50" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:50</a></p><hr><h3 id="invokes" tabindex="-1">invokes <a class="header-anchor" href="#invokes" aria-label="Permalink to &quot;invokes&quot;">​</a></h3><p>• <code>Private</code> <strong>invokes</strong>: <a href="./../modules/purista_core.html#frominvoketoothertype"><code>FromInvokeToOtherType</code></a>&lt;<code>Invokes</code>, { <code>outputSchema?</code>: <code>Schema</code> ; <code>parameterSchema?</code>: <code>Schema</code> ; <code>payloadSchema?</code>: <code>Schema</code> }&gt;</p><h4 id="defined-in-15" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-15" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L74" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:74</a></p><hr><h3 id="issecure" tabindex="-1">isSecure <a class="header-anchor" href="#issecure" aria-label="Permalink to &quot;isSecure&quot;">​</a></h3><p>• <code>Private</code> <strong>isSecure</strong>: <code>boolean</code> = <code>true</code></p><h4 id="defined-in-16" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-16" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L67" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:67</a></p><hr><h3 id="operationid" tabindex="-1">operationId <a class="header-anchor" href="#operationid" aria-label="Permalink to &quot;operationId&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>operationId</strong>: <code>string</code></p><h4 id="defined-in-17" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-17" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L69" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:69</a></p><hr><h3 id="outputcontentencoding" tabindex="-1">outputContentEncoding <a class="header-anchor" href="#outputcontentencoding" aria-label="Permalink to &quot;outputContentEncoding&quot;">​</a></h3><p>• <code>Private</code> <strong>outputContentEncoding</strong>: <code>undefined</code> | <code>string</code></p><h4 id="defined-in-18" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-18" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L55" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:55</a></p><hr><h3 id="outputcontenttype" tabindex="-1">outputContentType <a class="header-anchor" href="#outputcontenttype" aria-label="Permalink to &quot;outputContentType&quot;">​</a></h3><p>• <code>Private</code> <strong>outputContentType</strong>: <code>undefined</code> | <code>string</code></p><h4 id="defined-in-19" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-19" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L54" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:54</a></p><hr><h3 id="outputschema" tabindex="-1">outputSchema <a class="header-anchor" href="#outputschema" aria-label="Permalink to &quot;outputSchema&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>outputSchema</strong>: <code>ResultSchema</code></p><h4 id="defined-in-20" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-20" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L53" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:53</a></p><hr><h3 id="parameterschema" tabindex="-1">parameterSchema <a class="header-anchor" href="#parameterschema" aria-label="Permalink to &quot;parameterSchema&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>parameterSchema</strong>: <code>ParameterSchema</code></p><h4 id="defined-in-21" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-21" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L56" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:56</a></p><hr><h3 id="queryparameter" tabindex="-1">queryParameter <a class="header-anchor" href="#queryparameter" aria-label="Permalink to &quot;queryParameter&quot;">​</a></h3><p>• <code>Private</code> <strong>queryParameter</strong>: <a href="./../modules/purista_core.html#queryparameter"><code>QueryParameter</code></a>&lt;<code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;[] = <code>[]</code></p><h4 id="defined-in-22" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-22" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L57" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:57</a></p><hr><h3 id="summary" tabindex="-1">summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;summary&quot;">​</a></h3><p>• <code>Private</code> <code>Optional</code> <strong>summary</strong>: <code>string</code></p><h4 id="defined-in-23" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-23" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L63" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:63</a></p><hr><h3 id="tags" tabindex="-1">tags <a class="header-anchor" href="#tags" aria-label="Permalink to &quot;tags&quot;">​</a></h3><p>• <code>Private</code> <strong>tags</strong>: <code>string</code>[] = <code>[]</code></p><h4 id="defined-in-24" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-24" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L59" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:59</a></p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="addopenapierrorstatuscodes" tabindex="-1">addOpenApiErrorStatusCodes <a class="header-anchor" href="#addopenapierrorstatuscodes" aria-label="Permalink to &quot;addOpenApiErrorStatusCodes&quot;">​</a></h3><p>▸ <strong>addOpenApiErrorStatusCodes</strong>(<code>...codes</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>If a function can return other status codes, than the default ones, you should add them to openApi definition. Per default, 200, 204, 400, 401 and 500 can be autogenerated in most cases. Special cases or different status codes should be added with this function.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...codes</code></td><td style="text-align:left;"><a href="./../enums/purista_core.StatusCode.html"><code>StatusCode</code></a>[]</td><td style="text-align:left;">List of status codes</td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addErrorStatusCodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StatusCode.PaymentRequired, StatusCode.Conflict)</span></span></code></pre></div><h4 id="defined-in-25" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-25" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L394" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:394</a></p><hr><h3 id="addopenapitags" tabindex="-1">addOpenApiTags <a class="header-anchor" href="#addopenapitags" aria-label="Permalink to &quot;addOpenApiTags&quot;">​</a></h3><p>▸ <strong>addOpenApiTags</strong>(<code>...tags</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Add tags for openApi definition for given function. It is recommended to use some enum for tags to avoid typo issues.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...tags</code></td><td style="text-align:left;"><code>string</code>[]</td><td style="text-align:left;">List of tag strings</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Public&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="defined-in-26" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-26" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L376" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:376</a></p><hr><h3 id="addoutputschema" tabindex="-1">addOutputSchema <a class="header-anchor" href="#addoutputschema" aria-label="Permalink to &quot;addOutputSchema&quot;">​</a></h3><p>▸ <strong>addOutputSchema</strong>&lt;<code>T</code>&gt;(<code>outputSchema</code>, <code>outputContentType?</code>, <code>outputContentEncoding?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>T</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Add a schema for output payload validation. Types for payload of message and function payload output are generated from given schema.</p><h4 id="type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>outputSchema</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">The schema validation for output payload</td></tr><tr><td style="text-align:left;"><code>outputContentType?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content type of payload</td></tr><tr><td style="text-align:left;"><code>outputContentEncoding?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content encoding</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>T</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-27" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-27" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L290" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:290</a></p><hr><h3 id="addparameterschema" tabindex="-1">addParameterSchema <a class="header-anchor" href="#addparameterschema" aria-label="Permalink to &quot;addParameterSchema&quot;">​</a></h3><p>▸ <strong>addParameterSchema</strong>&lt;<code>T</code>&gt;(<code>parameterSchema</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>T</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Add a schema for output parameter validation. Types for parameter of message and function parameter output are generated from given schema.</p><h4 id="type-parameters-3" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-3" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr></tbody></table><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>parameterSchema</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">The schema validation for output parameter</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>T</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-28" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-28" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L322" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:322</a></p><hr><h3 id="addpayloadschema" tabindex="-1">addPayloadSchema <a class="header-anchor" href="#addpayloadschema" aria-label="Permalink to &quot;addPayloadSchema&quot;">​</a></h3><p>▸ <strong>addPayloadSchema</strong>&lt;<code>T</code>&gt;(<code>inputSchema</code>, <code>inputContentType?</code>, <code>inputContentEncoding?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>T</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Add a schema for input payload validation. Types for payload of message and function payload input are generated from given schema.</p><h4 id="type-parameters-4" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-4" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr></tbody></table><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inputSchema</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">The schema validation for input payload</td></tr><tr><td style="text-align:left;"><code>inputContentType?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content type of payload</td></tr><tr><td style="text-align:left;"><code>inputContentEncoding?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content encoding</td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>T</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-29" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-29" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L265" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:265</a></p><hr><h3 id="addqueryparameters" tabindex="-1">addQueryParameters <a class="header-anchor" href="#addqueryparameters" aria-label="Permalink to &quot;addQueryParameters&quot;">​</a></h3><p>▸ <strong>addQueryParameters</strong>(<code>...queryParams</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Define query parameters if you expose the function as http endpoint. Query parameters are add to openApi definition. Query parameters are add to input parameters.</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...queryParams</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#queryparameter"><code>QueryParameter</code></a>&lt;<code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;[]</td><td style="text-align:left;">Add one or more query parameter definitions</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addQueryParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;limit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="defined-in-30" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-30" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L359" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:359</a></p><hr><h3 id="adviceautoacknowledgemessages" tabindex="-1">adviceAutoacknowledgeMessages <a class="header-anchor" href="#adviceautoacknowledgemessages" aria-label="Permalink to &quot;adviceAutoacknowledgeMessages&quot;">​</a></h3><p>▸ <strong>adviceAutoacknowledgeMessages</strong>(<code>acknowledge?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Instruct the event bridge message broker to autoacknowledge commands as soon as they arrive. This means, a message will not be resent, if the command execution fails unexpected.</p><p>If set to false, the command message will be resent from message broker to eventbridge, if:</p><ul><li>the underlaying message broker supports it</li><li>if the command execution fails unexpected</li><li>if sending of command response failed</li></ul><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>acknowledge</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;">Enable (true) and disable (false)</td></tr></tbody></table><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinition</p><h4 id="defined-in-31" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-31" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L726" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:726</a></p><hr><h3 id="canemit" tabindex="-1">canEmit <a class="header-anchor" href="#canemit" aria-label="Permalink to &quot;canEmit&quot;">​</a></h3><p>▸ <strong>canEmit</strong>&lt;<code>EventName</code>, <code>T</code>&gt;(<code>eventName</code>, <code>schema</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code> &amp; <code>Record</code>&lt;<code>EventName</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;&gt;&gt;</p><p>Define which custom events the command can emit.</p><h4 id="type-parameters-5" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-5" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>EventName</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr></tbody></table><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>EventName</code></td><td style="text-align:left;">The custom event name</td></tr><tr><td style="text-align:left;"><code>schema</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">the payload schema</td></tr></tbody></table><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code> &amp; <code>Record</code>&lt;<code>EventName</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>T</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>T</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>T</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Type</code> ? <code>T</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>T</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>T</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>T</code>&gt; : <code>never</code>&gt;&gt;&gt;&gt;</p><h4 id="defined-in-32" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-32" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L226" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:226</a></p><hr><h3 id="caninvoke" tabindex="-1">canInvoke <a class="header-anchor" href="#caninvoke" aria-label="Permalink to &quot;canInvoke&quot;">​</a></h3><p>▸ <strong>canInvoke</strong>&lt;<code>Output</code>, <code>Payload</code>, <code>Parameter</code>, <code>SName</code>, <code>Version</code>, <code>Fname</code>&gt;(<code>serviceName</code>, <code>serviceVersion</code>, <code>serviceTarget</code>, <code>outputSchema?</code>, <code>payloadSchema?</code>, <code>parameterSchema?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code> &amp; <code>Record</code>&lt;<code>SName</code>, <code>Record</code>&lt;<code>Version</code>, <code>Record</code>&lt;<code>Fname</code>, (<code>payload</code>: <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Payload</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Payload</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Payload</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Type</code> ? <code>Payload</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Payload</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>Payload</code>&gt; : <code>never</code>&gt;&gt;, <code>parameter</code>: <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Parameter</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Parameter</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Parameter</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Type</code> ? <code>Parameter</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Parameter</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>Parameter</code>&gt; : <code>never</code>&gt;&gt;) =&gt; <code>Promise</code>&lt;<code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Output</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Output</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Output</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Type</code> ? <code>Output</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt;&gt;&gt;&gt;&gt;&gt;, <code>EmitListType</code>&gt;</p><p>Define a command which can be invoked by the current command</p><h4 id="type-parameters-6" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-6" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Output</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr><tr><td style="text-align:left;"><code>Payload</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr><tr><td style="text-align:left;"><code>Parameter</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr><tr><td style="text-align:left;"><code>SName</code></td><td style="text-align:left;">extends <code>string</code> = <code>string</code></td></tr><tr><td style="text-align:left;"><code>Version</code></td><td style="text-align:left;">extends <code>string</code> = <code>string</code></td></tr><tr><td style="text-align:left;"><code>Fname</code></td><td style="text-align:left;">extends <code>string</code> = <code>string</code></td></tr></tbody></table><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>serviceName</code></td><td style="text-align:left;"><code>SName</code></td></tr><tr><td style="text-align:left;"><code>serviceVersion</code></td><td style="text-align:left;"><code>Version</code></td></tr><tr><td style="text-align:left;"><code>serviceTarget</code></td><td style="text-align:left;"><code>Fname</code></td></tr><tr><td style="text-align:left;"><code>outputSchema?</code></td><td style="text-align:left;"><code>Output</code></td></tr><tr><td style="text-align:left;"><code>payloadSchema?</code></td><td style="text-align:left;"><code>Payload</code></td></tr><tr><td style="text-align:left;"><code>parameterSchema?</code></td><td style="text-align:left;"><code>Parameter</code></td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code> &amp; <code>Record</code>&lt;<code>SName</code>, <code>Record</code>&lt;<code>Version</code>, <code>Record</code>&lt;<code>Fname</code>, (<code>payload</code>: <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Payload</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Payload</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Payload</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Type</code> ? <code>Payload</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Payload</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Payload</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>Payload</code>&gt; : <code>never</code>&gt;&gt;, <code>parameter</code>: <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Parameter</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Parameter</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Parameter</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Type</code> ? <code>Parameter</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Parameter</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Parameter</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>Parameter</code>&gt; : <code>never</code>&gt;&gt;) =&gt; <code>Promise</code>&lt;<code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Output</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Output</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Output</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Type</code> ? <code>Output</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt;&gt;&gt;&gt;&gt;&gt;, <code>EmitListType</code>&gt;</p><h4 id="defined-in-33" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-33" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L151" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:151</a></p><hr><h3 id="disablehttpsecurity" tabindex="-1">disableHttpSecurity <a class="header-anchor" href="#disablehttpsecurity" aria-label="Permalink to &quot;disableHttpSecurity&quot;">​</a></h3><p>▸ <strong>disableHttpSecurity</strong>(<code>disabled?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>enable or disable security for this endpoint</p><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>disabled</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;"><code>true</code></td></tr></tbody></table><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-34" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-34" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L626" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:626</a></p><hr><h3 id="enablehttpsecurity" tabindex="-1">enableHttpSecurity <a class="header-anchor" href="#enablehttpsecurity" aria-label="Permalink to &quot;enableHttpSecurity&quot;">​</a></h3><p>▸ <strong>enableHttpSecurity</strong>(<code>enabled?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>enable or disable security for this endpoint</p><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>enabled</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;">Defaults to true if not set means &quot;enable security&quot;</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-35" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-35" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L616" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:616</a></p><hr><h3 id="exposeashttpendpoint" tabindex="-1">exposeAsHttpEndpoint <a class="header-anchor" href="#exposeashttpendpoint" aria-label="Permalink to &quot;exposeAsHttpEndpoint&quot;">​</a></h3><p>▸ <strong>exposeAsHttpEndpoint</strong>(<code>method</code>, <code>path</code>, <code>contentTypeRequest?</code>, <code>contentEncodingRequest?</code>, <code>contentTypeResponse?</code>, <code>contentEncodingResponse?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Mark the function to be exposed as http endpoint.</p><p>Api url prefix and service version are prepended automatically</p><p>For exposing a url like: <code>/api/V1/user/login</code> simply provide <code>user/login</code>as path</p><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>method</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#supportedhttpmethod"><code>SupportedHttpMethod</code></a></td><td style="text-align:left;">Http method POST, PUT, PATCH, GET, DELETE</td></tr><tr><td style="text-align:left;"><code>path</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The url path</td></tr><tr><td style="text-align:left;"><code>contentTypeRequest?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">input content type defaults to application/json</td></tr><tr><td style="text-align:left;"><code>contentEncodingRequest?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">input content encoding defaults to utf-8</td></tr><tr><td style="text-align:left;"><code>contentTypeResponse?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">input content type defaults to application/json</td></tr><tr><td style="text-align:left;"><code>contentEncodingResponse?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">input content encoding defaults to utf-8</td></tr></tbody></table><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-36" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-36" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L588" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:588</a></p><hr><h3 id="extendwithhttpmetadata" tabindex="-1">extendWithHttpMetadata <a class="header-anchor" href="#extendwithhttpmetadata" aria-label="Permalink to &quot;extendWithHttpMetadata&quot;">​</a></h3><p>▸ <strong>extendWithHttpMetadata</strong>(<code>definition</code>): <a href="./../modules/purista_core.html#complete"><code>Complete</code></a>&lt;<a href="./../modules/purista_core.html#commanddefinition"><code>CommandDefinition</code></a>&lt;<code>ServiceClassType</code>, <a href="./../modules/purista_core.html#commanddefinitionmetadatabase"><code>CommandDefinitionMetadataBase</code></a>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</p><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>definition</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#complete"><code>Complete</code></a>&lt;<a href="./../modules/purista_core.html#commanddefinition"><code>CommandDefinition</code></a>&lt;<code>ServiceClassType</code>, <a href="./../modules/purista_core.html#commanddefinitionmetadatabase"><code>CommandDefinitionMetadataBase</code></a>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../modules/purista_core.html#complete"><code>Complete</code></a>&lt;<a href="./../modules/purista_core.html#commanddefinition"><code>CommandDefinition</code></a>&lt;<code>ServiceClassType</code>, <a href="./../modules/purista_core.html#commanddefinitionmetadatabase"><code>CommandDefinitionMetadataBase</code></a>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</p><h4 id="defined-in-37" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-37" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L657" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:657</a></p><hr><h3 id="getcommandcontextmock" tabindex="-1">getCommandContextMock <a class="header-anchor" href="#getcommandcontextmock" aria-label="Permalink to &quot;getCommandContextMock&quot;">​</a></h3><p>▸ <strong>getCommandContextMock</strong>(<code>payload</code>, <code>parameter</code>, <code>sandbox?</code>): <code>Object</code></p><p>Returns a mocked command function context, which can be used in unit tests.</p><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>payload</code></td><td style="text-align:left;"><code>MessagePayloadType</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>parameter</code></td><td style="text-align:left;"><code>MessageParamsType</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>sandbox?</code></td><td style="text-align:left;"><code>SinonSandbox</code></td><td style="text-align:left;">Sinon sandbox</td></tr></tbody></table><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Object</code></p><p>a mocked command function context</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>mock</code></td><td style="text-align:left;">{ <code>configs</code>: { <code>getConfig</code>: <a href="./../modules/purista_core.html#configgetterfunction"><code>ConfigGetterFunction</code></a> ; <code>removeConfig</code>: <a href="./../modules/purista_core.html#configdeletefunction"><code>ConfigDeleteFunction</code></a> ; <code>setConfig</code>: <a href="./../modules/purista_core.html#configsetterfunction"><code>ConfigSetterFunction</code></a> } ; <code>emit</code>: <a href="./../modules/purista_core.html#emitcustommessagefunction"><code>EmitCustomMessageFunction</code></a>&lt;<code>EmitListType</code>&gt; ; <code>invoke</code>: <a href="./../modules/purista_core.html#invokefunction"><code>InvokeFunction</code></a> ; <code>logger</code>: <a href="./purista_core.Logger.html"><code>Logger</code></a> ; <code>message</code>: <code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <a href="./../enums/purista_core.EBMessageType.html#command"><code>Command</code></a> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>MessageParamsType</code> ; <code>payload</code>: <code>MessagePayloadType</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <a href="./../modules/purista_core.html#ebmessageaddress"><code>EBMessageAddress</code></a> ; <code>sender</code>: { <code>instanceId</code>: <code>string</code> ; <code>serviceName</code>: <code>string</code> ; <code>serviceTarget</code>: <code>string</code> ; <code>serviceVersion</code>: <code>string</code> } ; <code>tenantId?</code>: <code>string</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt; ; <code>secrets</code>: { <code>getSecret</code>: <a href="./../modules/purista_core.html#secretgetterfunction"><code>SecretGetterFunction</code></a> ; <code>removeSecret</code>: <a href="./../modules/purista_core.html#secretdeletefunction"><code>SecretDeleteFunction</code></a> ; <code>setSecret</code>: <a href="./../modules/purista_core.html#secretsetterfunction"><code>SecretSetterFunction</code></a> } ; <code>service</code>: <code>Invokes</code> ; <code>startActiveSpan</code>: &lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>context</code>: <code>undefined</code> | <code>Context</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;) =&gt; <code>Promise</code>&lt;<code>F</code>&gt; ; <code>states</code>: { <code>getState</code>: <a href="./../modules/purista_core.html#stategetterfunction"><code>StateGetterFunction</code></a> ; <code>removeState</code>: <a href="./../modules/purista_core.html#statedeletefunction"><code>StateDeleteFunction</code></a> ; <code>setState</code>: <a href="./../modules/purista_core.html#statesetterfunction"><code>StateSetterFunction</code></a> } ; <code>wrapInSpan</code>: &lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;, <code>context?</code>: <code>Context</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt; }</td></tr><tr><td style="text-align:left;"><code>mock.configs</code></td><td style="text-align:left;">{ <code>getConfig</code>: <a href="./../modules/purista_core.html#configgetterfunction"><code>ConfigGetterFunction</code></a> ; <code>removeConfig</code>: <a href="./../modules/purista_core.html#configdeletefunction"><code>ConfigDeleteFunction</code></a> ; <code>setConfig</code>: <a href="./../modules/purista_core.html#configsetterfunction"><code>ConfigSetterFunction</code></a> }</td></tr><tr><td style="text-align:left;"><code>mock.configs.getConfig</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#configgetterfunction"><code>ConfigGetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.configs.removeConfig</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#configdeletefunction"><code>ConfigDeleteFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.configs.setConfig</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#configsetterfunction"><code>ConfigSetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.emit</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#emitcustommessagefunction"><code>EmitCustomMessageFunction</code></a>&lt;<code>EmitListType</code>&gt;</td></tr><tr><td style="text-align:left;"><code>mock.invoke</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#invokefunction"><code>InvokeFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.logger</code></td><td style="text-align:left;"><a href="./purista_core.Logger.html"><code>Logger</code></a></td></tr><tr><td style="text-align:left;"><code>mock.message</code></td><td style="text-align:left;"><code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <a href="./../enums/purista_core.EBMessageType.html#command"><code>Command</code></a> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>MessageParamsType</code> ; <code>payload</code>: <code>MessagePayloadType</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <a href="./../modules/purista_core.html#ebmessageaddress"><code>EBMessageAddress</code></a> ; <code>sender</code>: { <code>instanceId</code>: <code>string</code> ; <code>serviceName</code>: <code>string</code> ; <code>serviceTarget</code>: <code>string</code> ; <code>serviceVersion</code>: <code>string</code> } ; <code>tenantId?</code>: <code>string</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt;</td></tr><tr><td style="text-align:left;"><code>mock.secrets</code></td><td style="text-align:left;">{ <code>getSecret</code>: <a href="./../modules/purista_core.html#secretgetterfunction"><code>SecretGetterFunction</code></a> ; <code>removeSecret</code>: <a href="./../modules/purista_core.html#secretdeletefunction"><code>SecretDeleteFunction</code></a> ; <code>setSecret</code>: <a href="./../modules/purista_core.html#secretsetterfunction"><code>SecretSetterFunction</code></a> }</td></tr><tr><td style="text-align:left;"><code>mock.secrets.getSecret</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#secretgetterfunction"><code>SecretGetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.secrets.removeSecret</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#secretdeletefunction"><code>SecretDeleteFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.secrets.setSecret</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#secretsetterfunction"><code>SecretSetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.service</code></td><td style="text-align:left;"><code>Invokes</code></td></tr><tr><td style="text-align:left;"><code>mock.startActiveSpan</code></td><td style="text-align:left;">&lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>context</code>: <code>undefined</code> | <code>Context</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td></tr><tr><td style="text-align:left;"><code>mock.states</code></td><td style="text-align:left;">{ <code>getState</code>: <a href="./../modules/purista_core.html#stategetterfunction"><code>StateGetterFunction</code></a> ; <code>removeState</code>: <a href="./../modules/purista_core.html#statedeletefunction"><code>StateDeleteFunction</code></a> ; <code>setState</code>: <a href="./../modules/purista_core.html#statesetterfunction"><code>StateSetterFunction</code></a> }</td></tr><tr><td style="text-align:left;"><code>mock.states.getState</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#stategetterfunction"><code>StateGetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.states.removeState</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#statedeletefunction"><code>StateDeleteFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.states.setState</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#statesetterfunction"><code>StateSetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.wrapInSpan</code></td><td style="text-align:left;">&lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;, <code>context?</code>: <code>Context</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs</code></td><td style="text-align:left;">{ <code>emit</code>: <a href="./../modules/purista_core.html#fromemittoothertype"><code>FromEmitToOtherType</code></a>&lt;<code>EmitListType</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; = eventList; <code>getConfig</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>getSecret</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>getState</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>invoke</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>logger</code>: { <code>debug</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>error</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>fatal</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>info</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>trace</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>warn</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; } = logger.stubs; <code>removeConfig</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>removeSecret</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>removeState</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>service</code>: <a href="./../modules/purista_core.html#frominvoketoothertype"><code>FromInvokeToOtherType</code></a>&lt;<code>Invokes</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; ; <code>setConfig</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>setSecret</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>setState</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>startActiveSpan</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>wrapInSpan</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; }</td></tr><tr><td style="text-align:left;"><code>stubs.emit</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#fromemittoothertype"><code>FromEmitToOtherType</code></a>&lt;<code>EmitListType</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.getConfig</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.getSecret</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.getState</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.invoke</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger</code></td><td style="text-align:left;">{ <code>debug</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>error</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>fatal</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>info</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>trace</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>warn</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; }</td></tr><tr><td style="text-align:left;"><code>stubs.logger.debug</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.error</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.fatal</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.info</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.trace</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.warn</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.removeConfig</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.removeSecret</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.removeState</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.service</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#frominvoketoothertype"><code>FromInvokeToOtherType</code></a>&lt;<code>Invokes</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.setConfig</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.setSecret</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.setState</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.startActiveSpan</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.wrapInSpan</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr></tbody></table><h4 id="defined-in-38" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-38" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L932" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:932</a></p><hr><h3 id="getcommandfunction" tabindex="-1">getCommandFunction <a class="header-anchor" href="#getcommandfunction" aria-label="Permalink to &quot;getCommandFunction&quot;">​</a></h3><p>▸ <strong>getCommandFunction</strong>(): <a href="./../modules/purista_core.html#commandfunction"><code>CommandFunction</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Get the function implementation including input and output validation. Also, before and after hooks are triggered during execution.</p><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../modules/purista_core.html#commandfunction"><code>CommandFunction</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>the function</p><h4 id="defined-in-39" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-39" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L872" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:872</a></p><hr><h3 id="getcommandfunctionplain" tabindex="-1">getCommandFunctionPlain <a class="header-anchor" href="#getcommandfunctionplain" aria-label="Permalink to &quot;getCommandFunctionPlain&quot;">​</a></h3><p>▸ <strong>getCommandFunctionPlain</strong>(): <a href="./../modules/purista_core.html#commandfunction"><code>CommandFunction</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>InferIn</code>&lt;<code>ResultSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Get the function implementation without input and output validation. No hooks are triggered during execution.</p><h4 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../modules/purista_core.html#commandfunction"><code>CommandFunction</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>InferIn</code>&lt;<code>ResultSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>the function</p><h4 id="defined-in-40" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-40" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L905" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:905</a></p><hr><h3 id="getcommandtransformcontextmock" tabindex="-1">getCommandTransformContextMock <a class="header-anchor" href="#getcommandtransformcontextmock" aria-label="Permalink to &quot;getCommandTransformContextMock&quot;">​</a></h3><p>▸ <strong>getCommandTransformContextMock</strong>(<code>payload</code>, <code>parameter</code>, <code>sandbox?</code>): <code>Object</code></p><p>Returns a mocked transform function context, which can be used in unit tests.</p><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>payload</code></td><td style="text-align:left;"><code>MessagePayloadType</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>parameter</code></td><td style="text-align:left;"><code>MessageParamsType</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>sandbox?</code></td><td style="text-align:left;"><code>SinonSandbox</code></td><td style="text-align:left;">Sinon sandbox</td></tr></tbody></table><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Object</code></p><p>a mocked transform function context</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>mock</code></td><td style="text-align:left;">{ <code>configs</code>: { <code>getConfig</code>: <a href="./../modules/purista_core.html#configgetterfunction"><code>ConfigGetterFunction</code></a> ; <code>removeConfig</code>: <a href="./../modules/purista_core.html#configdeletefunction"><code>ConfigDeleteFunction</code></a> ; <code>setConfig</code>: <a href="./../modules/purista_core.html#configsetterfunction"><code>ConfigSetterFunction</code></a> } ; <code>logger</code>: <a href="./purista_core.Logger.html"><code>Logger</code></a> ; <code>message</code>: <code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <a href="./../enums/purista_core.EBMessageType.html#command"><code>Command</code></a> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>MessageParamsType</code> ; <code>payload</code>: <code>MessagePayloadType</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <a href="./../modules/purista_core.html#ebmessageaddress"><code>EBMessageAddress</code></a> ; <code>sender</code>: { <code>instanceId</code>: <code>string</code> ; <code>serviceName</code>: <code>string</code> ; <code>serviceTarget</code>: <code>string</code> ; <code>serviceVersion</code>: <code>string</code> } ; <code>tenantId?</code>: <code>string</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt; ; <code>secrets</code>: { <code>getSecret</code>: <a href="./../modules/purista_core.html#secretgetterfunction"><code>SecretGetterFunction</code></a> ; <code>removeSecret</code>: <a href="./../modules/purista_core.html#secretdeletefunction"><code>SecretDeleteFunction</code></a> ; <code>setSecret</code>: <a href="./../modules/purista_core.html#secretsetterfunction"><code>SecretSetterFunction</code></a> } ; <code>startActiveSpan</code>: &lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>context</code>: <code>undefined</code> | <code>Context</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;) =&gt; <code>Promise</code>&lt;<code>F</code>&gt; ; <code>states</code>: { <code>getState</code>: <a href="./../modules/purista_core.html#stategetterfunction"><code>StateGetterFunction</code></a> ; <code>removeState</code>: <a href="./../modules/purista_core.html#statedeletefunction"><code>StateDeleteFunction</code></a> ; <code>setState</code>: <a href="./../modules/purista_core.html#statesetterfunction"><code>StateSetterFunction</code></a> } ; <code>wrapInSpan</code>: &lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;, <code>context?</code>: <code>Context</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt; }</td></tr><tr><td style="text-align:left;"><code>mock.configs</code></td><td style="text-align:left;">{ <code>getConfig</code>: <a href="./../modules/purista_core.html#configgetterfunction"><code>ConfigGetterFunction</code></a> ; <code>removeConfig</code>: <a href="./../modules/purista_core.html#configdeletefunction"><code>ConfigDeleteFunction</code></a> ; <code>setConfig</code>: <a href="./../modules/purista_core.html#configsetterfunction"><code>ConfigSetterFunction</code></a> }</td></tr><tr><td style="text-align:left;"><code>mock.configs.getConfig</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#configgetterfunction"><code>ConfigGetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.configs.removeConfig</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#configdeletefunction"><code>ConfigDeleteFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.configs.setConfig</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#configsetterfunction"><code>ConfigSetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.logger</code></td><td style="text-align:left;"><a href="./purista_core.Logger.html"><code>Logger</code></a></td></tr><tr><td style="text-align:left;"><code>mock.message</code></td><td style="text-align:left;"><code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <a href="./../enums/purista_core.EBMessageType.html#command"><code>Command</code></a> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>MessageParamsType</code> ; <code>payload</code>: <code>MessagePayloadType</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <a href="./../modules/purista_core.html#ebmessageaddress"><code>EBMessageAddress</code></a> ; <code>sender</code>: { <code>instanceId</code>: <code>string</code> ; <code>serviceName</code>: <code>string</code> ; <code>serviceTarget</code>: <code>string</code> ; <code>serviceVersion</code>: <code>string</code> } ; <code>tenantId?</code>: <code>string</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt;</td></tr><tr><td style="text-align:left;"><code>mock.secrets</code></td><td style="text-align:left;">{ <code>getSecret</code>: <a href="./../modules/purista_core.html#secretgetterfunction"><code>SecretGetterFunction</code></a> ; <code>removeSecret</code>: <a href="./../modules/purista_core.html#secretdeletefunction"><code>SecretDeleteFunction</code></a> ; <code>setSecret</code>: <a href="./../modules/purista_core.html#secretsetterfunction"><code>SecretSetterFunction</code></a> }</td></tr><tr><td style="text-align:left;"><code>mock.secrets.getSecret</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#secretgetterfunction"><code>SecretGetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.secrets.removeSecret</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#secretdeletefunction"><code>SecretDeleteFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.secrets.setSecret</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#secretsetterfunction"><code>SecretSetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.startActiveSpan</code></td><td style="text-align:left;">&lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>context</code>: <code>undefined</code> | <code>Context</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td></tr><tr><td style="text-align:left;"><code>mock.states</code></td><td style="text-align:left;">{ <code>getState</code>: <a href="./../modules/purista_core.html#stategetterfunction"><code>StateGetterFunction</code></a> ; <code>removeState</code>: <a href="./../modules/purista_core.html#statedeletefunction"><code>StateDeleteFunction</code></a> ; <code>setState</code>: <a href="./../modules/purista_core.html#statesetterfunction"><code>StateSetterFunction</code></a> }</td></tr><tr><td style="text-align:left;"><code>mock.states.getState</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#stategetterfunction"><code>StateGetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.states.removeState</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#statedeletefunction"><code>StateDeleteFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.states.setState</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#statesetterfunction"><code>StateSetterFunction</code></a></td></tr><tr><td style="text-align:left;"><code>mock.wrapInSpan</code></td><td style="text-align:left;">&lt;F&gt;(<code>name</code>: <code>string</code>, <code>opts</code>: <code>SpanOptions</code>, <code>fn</code>: (<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;, <code>context?</code>: <code>Context</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs</code></td><td style="text-align:left;">{ <code>getConfig</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>getSecret</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>getState</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>logger</code>: { <code>debug</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>error</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>fatal</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>info</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>trace</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>warn</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; } = logger.stubs; <code>removeConfig</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>removeSecret</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>removeState</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>setConfig</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>setSecret</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>setState</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>startActiveSpan</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>wrapInSpan</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; }</td></tr><tr><td style="text-align:left;"><code>stubs.getConfig</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.getSecret</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.getState</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger</code></td><td style="text-align:left;">{ <code>debug</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>error</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>fatal</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>info</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>trace</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; ; <code>warn</code>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; }</td></tr><tr><td style="text-align:left;"><code>stubs.logger.debug</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.error</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.fatal</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.info</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.trace</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.logger.warn</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.removeConfig</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.removeSecret</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.removeState</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.setConfig</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.setSecret</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.setState</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.startActiveSpan</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr><tr><td style="text-align:left;"><code>stubs.wrapInSpan</code></td><td style="text-align:left;"><code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</td></tr></tbody></table><h4 id="defined-in-41" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-41" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L949" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:949</a></p><hr><h3 id="getdefinition" tabindex="-1">getDefinition <a class="header-anchor" href="#getdefinition" aria-label="Permalink to &quot;getDefinition&quot;">​</a></h3><p>▸ <strong>getDefinition</strong>(): <a href="./../modules/purista_core.html#commanddefinition"><code>CommandDefinition</code></a>&lt;<code>ServiceClassType</code>, <a href="./../modules/purista_core.html#commanddefinitionmetadatabase"><code>CommandDefinitionMetadataBase</code></a>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>Infer</code>&lt;<code>ResultSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Creates and returns the CommandDefinition used as input for the service.</p><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../modules/purista_core.html#commanddefinition"><code>CommandDefinition</code></a>&lt;<code>ServiceClassType</code>, <a href="./../modules/purista_core.html#commanddefinitionmetadatabase"><code>CommandDefinitionMetadataBase</code></a>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>Infer</code>&lt;<code>ResultSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinition</p><h4 id="defined-in-42" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-42" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L735" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:735</a></p><hr><h3 id="gettransforminputfunction" tabindex="-1">getTransformInputFunction <a class="header-anchor" href="#gettransforminputfunction" aria-label="Permalink to &quot;getTransformInputFunction&quot;">​</a></h3><p>▸ <strong>getTransformInputFunction</strong>(): <code>undefined</code> | <a href="./../modules/purista_core.html#commandtransforminputhook"><code>CommandTransformInputHook</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>MessagePayloadType</code>, <code>MessageParamsType</code>&gt;</p><p>Return the transform input function</p><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>undefined</code> | <a href="./../modules/purista_core.html#commandtransforminputhook"><code>CommandTransformInputHook</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>MessagePayloadType</code>, <code>MessageParamsType</code>&gt;</p><p>the input transform function if defined</p><h4 id="defined-in-43" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-43" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L448" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:448</a></p><hr><h3 id="gettransformoutputfunction" tabindex="-1">getTransformOutputFunction <a class="header-anchor" href="#gettransformoutputfunction" aria-label="Permalink to &quot;getTransformOutputFunction&quot;">​</a></h3><p>▸ <strong>getTransformOutputFunction</strong>(): <code>undefined</code> | <a href="./../modules/purista_core.html#commandtransformoutputhook"><code>CommandTransformOutputHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;</p><p>Return the transform output function</p><h4 id="returns-20" tabindex="-1">Returns <a class="header-anchor" href="#returns-20" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>undefined</code> | <a href="./../modules/purista_core.html#commandtransformoutputhook"><code>CommandTransformOutputHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;</p><p>the transform output function if defined</p><h4 id="defined-in-44" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-44" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L509" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:509</a></p><hr><h3 id="markasdeprecated" tabindex="-1">markAsDeprecated <a class="header-anchor" href="#markasdeprecated" aria-label="Permalink to &quot;markAsDeprecated&quot;">​</a></h3><p>▸ <strong>markAsDeprecated</strong>(): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Mark this endpoint/command as deprecated</p><h4 id="returns-21" tabindex="-1">Returns <a class="header-anchor" href="#returns-21" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-45" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-45" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L311" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:311</a></p><hr><h3 id="setafterguardhooks" tabindex="-1">setAfterGuardHooks <a class="header-anchor" href="#setafterguardhooks" aria-label="Permalink to &quot;setAfterGuardHooks&quot;">​</a></h3><p>▸ <strong>setAfterGuardHooks</strong>(<code>afterGuards</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Set one or more after guard hook(s). If there are multiple after guard hooks, they are executed in parallel</p><h4 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>afterGuards</code></td><td style="text-align:left;"><code>Record</code>&lt;<code>string</code>, <a href="./../modules/purista_core.html#commandafterguardhook"><code>CommandAfterGuardHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-22" tabindex="-1">Returns <a class="header-anchor" href="#returns-22" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-46" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-46" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L554" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:554</a></p><hr><h3 id="setbeforeguardhooks" tabindex="-1">setBeforeGuardHooks <a class="header-anchor" href="#setbeforeguardhooks" aria-label="Permalink to &quot;setBeforeGuardHooks&quot;">​</a></h3><p>▸ <strong>setBeforeGuardHooks</strong>(<code>beforeGuards</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Set one or more before guard hook(s). If there are multiple before guard hooks, they are executed in parallel</p><h4 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>beforeGuards</code></td><td style="text-align:left;"><code>Record</code>&lt;<code>string</code>, <a href="./../modules/purista_core.html#commandbeforeguardhook"><code>CommandBeforeGuardHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;&gt;</td><td style="text-align:left;">Object of key = name of guard, value = function</td></tr></tbody></table><h4 id="returns-23" tabindex="-1">Returns <a class="header-anchor" href="#returns-23" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-47" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-47" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L530" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:530</a></p><hr><h3 id="setcommandfunction" tabindex="-1">setCommandFunction <a class="header-anchor" href="#setcommandfunction" aria-label="Permalink to &quot;setCommandFunction&quot;">​</a></h3><p>▸ <strong>setCommandFunction</strong>(<code>fn</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Required: Set the function implementation. The types should be automatically set as soon as schemas previously defined. As the function will be a a function of a service class you need to implement as function declaration. Anonymous functions do not have access to the <code>this</code> scope.</p><h4 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#commandfunction"><code>CommandFunction</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>Infer</code>&lt;<code>PayloadSchema</code>&gt;, <code>Infer</code>&lt;<code>ParameterSchema</code>&gt;, <code>InferIn</code>&lt;<code>ResultSchema</code>&gt;, <code>Invokes</code>, <code>EmitListType</code>&gt;</td><td style="text-align:left;">the function implementation</td></tr></tbody></table><h4 id="returns-24" tabindex="-1">Returns <a class="header-anchor" href="#returns-24" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`the result output payload\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="defined-in-48" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-48" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L820" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:820</a></p><hr><h3 id="setopenapioperationid" tabindex="-1">setOpenApiOperationId <a class="header-anchor" href="#setopenapioperationid" aria-label="Permalink to &quot;setOpenApiOperationId&quot;">​</a></h3><p>▸ <strong>setOpenApiOperationId</strong>(<code>operationId</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Set the operationId for openApi documentation</p><h4 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>operationId</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-25" tabindex="-1">Returns <a class="header-anchor" href="#returns-25" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-49" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-49" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L652" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:652</a></p><hr><h3 id="setopenapisummary" tabindex="-1">setOpenApiSummary <a class="header-anchor" href="#setopenapisummary" aria-label="Permalink to &quot;setOpenApiSummary&quot;">​</a></h3><p>▸ <strong>setOpenApiSummary</strong>(<code>summary</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Set the function summary text used for example in openApi documentation</p><h4 id="parameters-20" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-20" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>summary</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Summary text</td></tr></tbody></table><h4 id="returns-26" tabindex="-1">Returns <a class="header-anchor" href="#returns-26" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSummary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Some function summary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="defined-in-50" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-50" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L642" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:642</a></p><hr><h3 id="setsuccesseventname" tabindex="-1">setSuccessEventName <a class="header-anchor" href="#setsuccesseventname" aria-label="Permalink to &quot;setSuccessEventName&quot;">​</a></h3><p>▸ <strong>setSuccessEventName</strong>&lt;<code>N</code>&gt;(<code>eventName</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><h4 id="type-parameters-7" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-7" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>N</code></td><td style="text-align:left;">extends <code>string</code></td></tr></tbody></table><h4 id="parameters-21" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-21" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#nonemptystring"><code>NonEmptyString</code></a>&lt;<code>N</code>&gt;</td></tr></tbody></table><h4 id="returns-27" tabindex="-1">Returns <a class="header-anchor" href="#returns-27" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><h4 id="defined-in-51" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-51" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L252" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:252</a></p><hr><h3 id="settransforminput" tabindex="-1">setTransformInput <a class="header-anchor" href="#settransforminput" aria-label="Permalink to &quot;setTransformInput&quot;">​</a></h3><p>▸ <strong>setTransformInput</strong>&lt;<code>TransFormPayloadSchema</code>, <code>TransFormParameterSchema</code>&gt;(<code>transformInputSchema</code>, <code>transformParameterSchema</code>, <code>transformFunction</code>, <code>inputContentType?</code>, <code>inputContentEncoding?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>TransFormPayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>TransFormPayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Type</code> ? <code>TransFormPayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>TransFormPayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>TransFormPayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>TransFormParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>TransFormParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Type</code> ? <code>TransFormParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>TransFormParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>TransFormParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Set a transform input hook which will encode or transform the input payload and parameters. Will be executed as first step before input validation, before guard and the function itself. This will change the type of input message payload and input message parameter.</p><h4 id="type-parameters-8" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-8" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>TransFormPayloadSchema</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr><tr><td style="text-align:left;"><code>TransFormParameterSchema</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr></tbody></table><h4 id="parameters-22" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-22" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>transformInputSchema</code></td><td style="text-align:left;"><code>TransFormPayloadSchema</code></td><td style="text-align:left;">Input payload validation schema</td></tr><tr><td style="text-align:left;"><code>transformParameterSchema</code></td><td style="text-align:left;"><code>TransFormParameterSchema</code></td><td style="text-align:left;">Input parameter validation schema</td></tr><tr><td style="text-align:left;"><code>transformFunction</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#commandtransforminputhook"><code>CommandTransformInputHook</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>PayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>PayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Type</code> ? <code>PayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>PayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>PayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>TransFormPayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>TransFormPayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Type</code> ? <code>TransFormPayloadSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>TransFormPayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>TransFormPayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>TransFormParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>TransFormParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Type</code> ? <code>TransFormParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>TransFormParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>TransFormParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;</td><td style="text-align:left;">Transform input function</td></tr><tr><td style="text-align:left;"><code>inputContentType?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content type of payload</td></tr><tr><td style="text-align:left;"><code>inputContentEncoding?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content encoding</td></tr></tbody></table><h4 id="returns-28" tabindex="-1">Returns <a class="header-anchor" href="#returns-28" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>TransFormPayloadSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>TransFormPayloadSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Type</code> ? <code>TransFormPayloadSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>TransFormPayloadSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormPayloadSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>TransFormPayloadSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>TransFormParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>TransFormParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Type</code> ? <code>TransFormParameterSchema</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>TransFormParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>TransFormParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>TransFormParameterSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>MessageResultType</code>, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-52" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-52" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L410" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:410</a></p><hr><h3 id="settransformoutput" tabindex="-1">setTransformOutput <a class="header-anchor" href="#settransformoutput" aria-label="Permalink to &quot;setTransformOutput&quot;">​</a></h3><p>▸ <strong>setTransformOutput</strong>&lt;<code>Output</code>&gt;(<code>transformOutputSchema</code>, <code>transformFunction</code>, <code>outputContentType?</code>, <code>outputContentEncoding?</code>): <a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Output</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Output</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Output</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Type</code> ? <code>Output</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt;&gt;, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>Set a transform output hook which will encode or transform the response payload. Will be executed at very last step after function execution, output validation and after guard hooks. This will change the type of output message payload.</p><h4 id="type-parameters-9" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-9" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Output</code></td><td style="text-align:left;">extends <code>Schema</code></td></tr></tbody></table><h4 id="parameters-23" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-23" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>transformOutputSchema</code></td><td style="text-align:left;"><code>Output</code></td><td style="text-align:left;">The output validation schema</td></tr><tr><td style="text-align:left;"><code>transformFunction</code></td><td style="text-align:left;"><a href="./../modules/purista_core.html#commandtransformoutputhook"><code>CommandTransformOutputHook</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Output</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Output</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Output</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Type</code> ? <code>Output</code>[<code>&quot;inferIn&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>From</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Any</code> ? <code>OutputOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>any</code> ? <code>Input</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>input</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ResultSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ResultSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Type</code> ? <code>ResultSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ResultSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ResultSchema</code>&gt; : <code>never</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>ParameterSchema</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>ParameterSchema</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Type</code> ? <code>ParameterSchema</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>ParameterSchema</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>ParameterSchema</code>&gt; : <code>never</code>&gt;&gt;&gt;</td><td style="text-align:left;">Transform output function</td></tr><tr><td style="text-align:left;"><code>outputContentType?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content type of payload</td></tr><tr><td style="text-align:left;"><code>outputContentEncoding?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional the content encoding</td></tr></tbody></table><h4 id="returns-29" tabindex="-1">Returns <a class="header-anchor" href="#returns-29" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./purista_core.CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>ServiceClassType</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>UnknownIfNever</code>&lt;<code>IfDefined</code>&lt;<code>Output</code> extends <code>CustomSchema</code>&lt;<code>any</code>&gt; ? keyof <code>Output</code> extends <code>never</code> ? <code>Awaited</code>&lt;<code>ReturnType</code>&lt;<code>Output</code>&gt;&gt; : <code>never</code> : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Type</code> ? <code>Output</code>[<code>&quot;infer&quot;</code>] : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$1</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>To</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Any</code> ? <code>TypeOf</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Predicate</code> ? <code>Infer$1</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Runtype</code> ? <code>Static</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Struct</code>&lt;<code>any</code>, <code>any</code>&gt; ? <code>Infer$2</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>TSchema</code> ? <code>Static</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>any</code> ? <code>Output</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>Schema$2</code> ? <code>InferType</code>&lt;<code>this</code>[<code>&quot;schema&quot;</code>]&gt; : <code>never</code>&gt; | <code>IfDefined</code>&lt;<code>Output</code> extends <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt; ? <code>output</code>&lt;<code>Output</code>&gt; : <code>never</code>&gt;&gt;, <code>PayloadSchema</code>, <code>ParameterSchema</code>, <code>ResultSchema</code>, <code>Invokes</code>, <code>EmitListType</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="defined-in-53" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-53" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/sebastianwessel/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L472" target="_blank" rel="noreferrer">CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:472</a></p>`,482),n=[a];function r(i,s,l,m,h,u){return d(),o("div",null,n)}const p=e(t,[["render",r]]);export{g as __pageData,p as default};
