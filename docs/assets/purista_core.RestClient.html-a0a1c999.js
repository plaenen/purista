import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as h,b as e,e as a,w as s,d as t,a as o}from"./app-c21e84c1.js";const c={},p=e("h1",{id:"interface-restclient",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-restclient","aria-hidden":"true"},"#"),t(" Interface: RestClient")],-1),u=e("p",null,"A REST API client which will provide GET, POST, PUT, PATCH, DELETE methods The client provides error and timeout handling and tries to decode the responses",-1),_=e("h2",{id:"implemented-by",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implemented-by","aria-hidden":"true"},"#"),t(" Implemented by")],-1),f=e("code",null,"HttpClient",-1),y=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),b=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),m=o('<h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h3><p>▸ <strong>delete</strong>&lt;<code>T</code>&gt;(<code>path</code>, <code>options</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Make a DELETE request against baseUrl+path Returns body text if response content type is not set to <code>application/json</code>. If response content type is <code>application/json</code>, the JSON parsed result will be returned</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',7),g=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),x=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"path")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),T=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),C={style:{"text-align":"left"}},R=e("code",null,"HttpClientRequestOptions",-1),k=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),P=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),H=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),N={href:"https://github.com/sebastianwessel/purista/blob/master/packages/core/src/HttpClient/types/RestClient.ts#L60",target:"_blank",rel:"noopener noreferrer"},w=o('<hr><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h3><p>▸ <strong>get</strong>&lt;<code>T</code>&gt;(<code>path</code>, <code>options</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Make a GET request against baseUrl+path Returns body text if response content type is not set to <code>application/json</code>. If response content type is <code>application/json</code>, the JSON parsed result will be returned</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',7),q=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),E=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"path")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),I=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),L={style:{"text-align":"left"}},O=e("code",null,"HttpClientRequestOptions",-1),S=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),j=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),D=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),M={href:"https://github.com/sebastianwessel/purista/blob/master/packages/core/src/HttpClient/types/RestClient.ts#L21",target:"_blank",rel:"noopener noreferrer"},U=o('<hr><h3 id="patch" tabindex="-1"><a class="header-anchor" href="#patch" aria-hidden="true">#</a> patch</h3><p>▸ <strong>patch</strong>&lt;<code>T</code>&gt;(<code>path</code>, <code>payload</code>, <code>options</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Make a PATCH request against baseUrl+path Returns body text if response content type is not set to <code>application/json</code>. If response content type is <code>application/json</code>, the JSON parsed result will be returned</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',7),v=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),A=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"path")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),B=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"unknown")])],-1),J=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),V={style:{"text-align":"left"}},G=e("code",null,"HttpClientRequestOptions",-1),z=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2","aria-hidden":"true"},"#"),t(" Returns")],-1),F=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),K=e("h4",{id:"defined-in-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-2","aria-hidden":"true"},"#"),t(" Defined in")],-1),Q={href:"https://github.com/sebastianwessel/purista/blob/master/packages/core/src/HttpClient/types/RestClient.ts#L51",target:"_blank",rel:"noopener noreferrer"},W=o('<hr><h3 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> post</h3><p>▸ <strong>post</strong>&lt;<code>T</code>&gt;(<code>path</code>, <code>payload</code>, <code>options</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Make a POST request against baseUrl+path Returns body text if response content type is not set to <code>application/json</code>. If response content type is <code>application/json</code>, the JSON parsed result will be returned</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4>',7),X=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Y=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"path")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),Z=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"unknown")])],-1),$=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),ee={style:{"text-align":"left"}},te=e("code",null,"HttpClientRequestOptions",-1),ae=e("h4",{id:"returns-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-3","aria-hidden":"true"},"#"),t(" Returns")],-1),ne=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),se=e("h4",{id:"defined-in-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-3","aria-hidden":"true"},"#"),t(" Defined in")],-1),le={href:"https://github.com/sebastianwessel/purista/blob/master/packages/core/src/HttpClient/types/RestClient.ts#L31",target:"_blank",rel:"noopener noreferrer"},oe=o('<hr><h3 id="put" tabindex="-1"><a class="header-anchor" href="#put" aria-hidden="true">#</a> put</h3><p>▸ <strong>put</strong>&lt;<code>T</code>&gt;(<code>path</code>, <code>payload</code>, <code>options</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Make a PUT request against baseUrl+path Returns body text if response content type is not set to <code>application/json</code>. If response content type is <code>application/json</code>, the JSON parsed result will be returned</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',7),re=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),de=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"path")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),ie=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"unknown")])],-1),he=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),ce={style:{"text-align":"left"}},pe=e("code",null,"HttpClientRequestOptions",-1),ue=e("h4",{id:"returns-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-4","aria-hidden":"true"},"#"),t(" Returns")],-1),_e=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),fe=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),ye={href:"https://github.com/sebastianwessel/purista/blob/master/packages/core/src/HttpClient/types/RestClient.ts#L41",target:"_blank",rel:"noopener noreferrer"},be=o('<hr><h3 id="setbearertoken" tabindex="-1"><a class="header-anchor" href="#setbearertoken" aria-hidden="true">#</a> setBearerToken</h3><p>▸ <strong>setBearerToken</strong>(<code>token</code>): <code>void</code></p><p>Set the Auth-Bearer-Token for all following requests</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>token</code></td><td style="text-align:left;"><code>undefined</code> | <code>string</code></td><td style="text-align:left;">the bearer token</td></tr></tbody></table><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4>',9),me={href:"https://github.com/sebastianwessel/purista/blob/master/packages/core/src/HttpClient/types/RestClient.ts#L12",target:"_blank",rel:"noopener noreferrer"};function ge(xe,Te){const n=r("RouterLink"),l=r("ExternalLinkIcon");return i(),h("div",null,[e("p",null,[a(n,{to:"/api/"},{default:s(()=>[t("PURISTA API")]),_:1}),t(" / "),a(n,{to:"/api/modules.html"},{default:s(()=>[t("Modules")]),_:1}),t(" / "),a(n,{to:"/api/modules/purista_core.html"},{default:s(()=>[t("@purista/core")]),_:1}),t(" / RestClient")]),p,e("p",null,[a(n,{to:"/api/modules/purista_core.html"},{default:s(()=>[t("@purista/core")]),_:1}),t(".RestClient")]),u,_,e("ul",null,[e("li",null,[a(n,{to:"/api/classes/purista_core.HttpClient.html"},{default:s(()=>[f]),_:1})])]),y,b,e("ul",null,[e("li",null,[a(n,{to:"/api/interfaces/purista_core.RestClient.html#delete"},{default:s(()=>[t("delete")]),_:1})]),e("li",null,[a(n,{to:"/api/interfaces/purista_core.RestClient.html#get"},{default:s(()=>[t("get")]),_:1})]),e("li",null,[a(n,{to:"/api/interfaces/purista_core.RestClient.html#patch"},{default:s(()=>[t("patch")]),_:1})]),e("li",null,[a(n,{to:"/api/interfaces/purista_core.RestClient.html#post"},{default:s(()=>[t("post")]),_:1})]),e("li",null,[a(n,{to:"/api/interfaces/purista_core.RestClient.html#put"},{default:s(()=>[t("put")]),_:1})]),e("li",null,[a(n,{to:"/api/interfaces/purista_core.RestClient.html#setbearertoken"},{default:s(()=>[t("setBearerToken")]),_:1})])]),m,e("table",null,[g,e("tbody",null,[x,e("tr",null,[T,e("td",C,[a(n,{to:"/api/modules/purista_core.html#httpclientrequestoptions"},{default:s(()=>[R]),_:1})])])])]),k,P,H,e("p",null,[e("a",N,[t("HttpClient/types/RestClient.ts:60"),a(l)])]),w,e("table",null,[q,e("tbody",null,[E,e("tr",null,[I,e("td",L,[a(n,{to:"/api/modules/purista_core.html#httpclientrequestoptions"},{default:s(()=>[O]),_:1})])])])]),S,j,D,e("p",null,[e("a",M,[t("HttpClient/types/RestClient.ts:21"),a(l)])]),U,e("table",null,[v,e("tbody",null,[A,B,e("tr",null,[J,e("td",V,[a(n,{to:"/api/modules/purista_core.html#httpclientrequestoptions"},{default:s(()=>[G]),_:1})])])])]),z,F,K,e("p",null,[e("a",Q,[t("HttpClient/types/RestClient.ts:51"),a(l)])]),W,e("table",null,[X,e("tbody",null,[Y,Z,e("tr",null,[$,e("td",ee,[a(n,{to:"/api/modules/purista_core.html#httpclientrequestoptions"},{default:s(()=>[te]),_:1})])])])]),ae,ne,se,e("p",null,[e("a",le,[t("HttpClient/types/RestClient.ts:31"),a(l)])]),oe,e("table",null,[re,e("tbody",null,[de,ie,e("tr",null,[he,e("td",ce,[a(n,{to:"/api/modules/purista_core.html#httpclientrequestoptions"},{default:s(()=>[pe]),_:1})])])])]),ue,_e,fe,e("p",null,[e("a",ye,[t("HttpClient/types/RestClient.ts:41"),a(l)])]),be,e("p",null,[e("a",me,[t("HttpClient/types/RestClient.ts:12"),a(l)])])])}const ke=d(c,[["render",ge],["__file","purista_core.RestClient.html.vue"]]);export{ke as default};
