import{_ as s,c as i,o as a,V as e}from"./chunks/framework.ITQiifkM.js";const g=JSON.parse('{"title":"Schemas & Validation","description":"Schemas and validation in PURISTA","frontmatter":{"order":200020,"title":"Schemas & Validation","description":"Schemas and validation in PURISTA","image":"/graphic/builder.png"},"headers":[],"relativePath":"handbook/2_building_business-logic/schemas.md","filePath":"handbook/2_building_business-logic/schemas.md","lastUpdated":1707652430000}'),n={name:"handbook/2_building_business-logic/schemas.md"},t=e(`<h1 id="schemas-and-validation-in-purista" tabindex="-1">Schemas and Validation in PURISTA <a class="header-anchor" href="#schemas-and-validation-in-purista" aria-label="Permalink to &quot;Schemas and Validation in PURISTA&quot;">â€‹</a></h1><p>PURISTA is highly using schemas.<br> Schemas are used for validations, typescript type generation and other generations like OpenApi definitions.</p><p>PURISTA itself supports a wide range of schema libraries - thanks to <a href="https://typeschema.com/#coverage" target="_blank" rel="noreferrer">Typeschema.com</a>.<br> But, it is recommended to use <a href="https://zod.dev/" target="_blank" rel="noreferrer">Zod</a> as schema library, as there is a large eco-system around, which enables us to provide features like OpenApi schema generation.</p><p><strong>Only Zod schema will have first class support in PURISTA!</strong></p><p>We also provide a helper <code>extendApi</code>for Zod schema, to enable some cool features.</p><p>As an example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { extendApi } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@purista/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mySchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extendApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  example: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), {title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;An example property&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, example: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}), { title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Some description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, example: { value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } })</span></span></code></pre></div><p>This schema will not only contain the raw validation and type information. It also contains descriptions and example values. We are using these values, to enrich the OpenApi documentation and other automated documentations.<br> Also, any new developer will have some nice explanation and examples in the source code.</p>`,8),l=[t];function p(h,r,o,d,k,c){return a(),i("div",null,l)}const E=s(n,[["render",p]]);export{g as __pageData,E as default};
