import{_ as a,c as s,o as i,V as e}from"./chunks/framework.ITQiifkM.js";const E=JSON.parse('{"title":"The Command Builder","description":"How to use the command builder to create a new command for a service","frontmatter":{"title":"The Command Builder","description":"How to use the command builder to create a new command for a service","order":202010},"headers":[],"relativePath":"handbook/2_building_business-logic/command/the-command-builder.md","filePath":"handbook/2_building_business-logic/command/the-command-builder.md","lastUpdated":1707666377000}'),n={name:"handbook/2_building_business-logic/command/the-command-builder.md"},t=e(`<h1 id="the-command-builder" tabindex="-1">The command builder <a class="header-anchor" href="#the-command-builder" aria-label="Permalink to &quot;The command builder&quot;">​</a></h1><p>For adding a function to a service, you should use the function builder. It is recommended to use the <code>getCommandBuilder</code> method of your service builder instance.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCommandBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myServiceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommandBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;functionName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;some function description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;functionEventEmitted&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="payload-schema" tabindex="-1">Payload schema <a class="header-anchor" href="#payload-schema" aria-label="Permalink to &quot;Payload schema&quot;">​</a></h2><p>It is highly recommended to use schema validation for any input and output of a command. If you use the PURISTA CLI for adding commands, a <code>schema.ts</code> and <code>type.ts</code> file is generated.<br> The payload schema is already added to the command builder.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputPayloadSchema,  </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./schema.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCommandBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myServiceBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommandBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some function description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionEventEmitted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPayloadSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputPayloadSchema) </span></span></code></pre></div><p>By adding a payload schema, the command input will be validated during runtime and typescript types are set during development.</p><h2 id="parameter-schema" tabindex="-1">Parameter schema <a class="header-anchor" href="#parameter-schema" aria-label="Permalink to &quot;Parameter schema&quot;">​</a></h2><p>Parameter must be an object.<br> For example, if you expose your command via REST-API, query parameters and url parameters are passed to the command function as parameter entries.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputPayloadSchema,  </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputParameterSchema, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./schema.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCommandBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myServiceBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommandBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some function description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionEventEmitted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPayloadSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputPayloadSchema) </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addParameterSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputParameterSchema) </span></span></code></pre></div><h2 id="output-schema" tabindex="-1">Output schema <a class="header-anchor" href="#output-schema" aria-label="Permalink to &quot;Output schema&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputPayloadSchema,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputParameterSchema,</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandOutputSchema, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./schema.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCommandBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myServiceBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommandBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some function description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionEventEmitted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPayloadSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputPayloadSchema) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addParameterSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputParameterSchema)</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addOutputSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandOutputSchema) </span></span></code></pre></div><h2 id="the-business-logic" tabindex="-1">The business logic <a class="header-anchor" href="#the-business-logic" aria-label="Permalink to &quot;The business logic&quot;">​</a></h2><p>For implementing your business logic, you will need to set the command function.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputPayloadSchema,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandInputParameterSchema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myServiceV1MyCommandOutputSchema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./schema.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCommandBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myServiceBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommandBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some function description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionEventEmitted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPayloadSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputPayloadSchema) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addParameterSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandInputParameterSchema)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addOutputSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myServiceV1MyCommandOutputSchema)</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCommandFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {  </span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // implement your logic here</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }) </span></span></code></pre></div><p>The command function will be called with 3 parameters.</p><h3 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h3><p>The command function context will contain the original message.<br> This is usefull, if you like to access message information like <code>principalId</code>or <code>tenantId</code>.</p><p>The context provides also a logger.<br> It is highly recommended to use <code>context.logger</code> instead of <code>this.logger</code>, to ensure correct logging of traces.</p><p>Also, you can access config, secret and state store via the context, if they are provided during service instantiation.</p><p>The context contains the <code>emit</code> method, which can be used to emit custom events, which might be consumed by subscriptions.</p><h3 id="payload" tabindex="-1">Payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;Payload&quot;">​</a></h3><p>The payload is a validated value and typed based on the payload schema.</p><h3 id="parameter" tabindex="-1">Parameter <a class="header-anchor" href="#parameter" aria-label="Permalink to &quot;Parameter&quot;">​</a></h3><p>The parameter is a validated value and typed based on the paramater schema.</p><h2 id="transformer" tabindex="-1">Transformer <a class="header-anchor" href="#transformer" aria-label="Permalink to &quot;Transformer&quot;">​</a></h2><p>The idea of having transformers, follows the PURISTA principal to separate things and decouple business logic from technical needs. Transformers are responsible to convert the raw message payload in/to the data shape &amp; type, the command function is expecting.</p><p>Use transformers for:</p><ul><li>converting data format (example xml to js object to xml)</li><li>decrypt and encrypt the payload (end-to-end encryption)</li></ul><h3 id="input-transformer" tabindex="-1">Input transformer <a class="header-anchor" href="#input-transformer" aria-label="Permalink to &quot;Input transformer&quot;">​</a></h3><p>If a input transform is set, it will be executed as very first step in the message handling. The input transformer has it&#39;s own schemas for input payload and parameters. If the schema validation fails, an error response will automatically created and sent back to the caller. The command guards and the command function are not executed, if this validations fails. The error will be a <code>HandledError</code> with status of <code>Bad Request</code>, as the input is not as expected.</p><p>If the transform function itself is throwing an error, other than <code>HandledError</code>, a <code>UnhandledError</code> with status <code>Internal Server Error</code> is sent back to the caller.</p><p>If the transformer is used for decryption, and the decryption fails, the transform function should throw a <code>HandledError</code> with a status of <code>Unauthorized</code> or <code>Not permitted</code>.</p><p>The transform function must return a object with <code>payload</code> and <code>parameter</code> property. The type of these two properties is generated and set, based on the command function input schema and command function parameter schema. Because of this, the input transformer must be defined after the command function schemas.</p><h3 id="output-transformer" tabindex="-1">Output transformer <a class="header-anchor" href="#output-transformer" aria-label="Permalink to &quot;Output transformer&quot;">​</a></h3><p>If a output transform is set, it will be executed as very last step in the message handling. The output transformer has it&#39;s own schema, which will validate the returned value of the transform function. If the schema validation fails, an error response will automatically created and sent back to the caller. The command guards and the command function are not executed, if this validations fails.</p><p>If the transform function itself is throwing an error, other than <code>HandledError</code>, a <code>UnhandledError</code> with status <code>Internal Server Error</code> is sent back to the caller.</p><p>The transform function must return the final raw payload. Because of this, the output transformer must be defined after the command function schemas.</p><h2 id="guards" tabindex="-1">Guards <a class="header-anchor" href="#guards" aria-label="Permalink to &quot;Guards&quot;">​</a></h2><p>The intention of guards is, to have the opportunity, to move authentication and authorization logic out of the main business logic. A common example is, to add role and permission checks by using guards.</p><p>You can add multiple values to command function. Guards are executed in parallel after transformers and before the command function is executed. Guards should throw a <code>HandledError</code> with a proper status code, if the execution should be aborted. If a guard is throwing an error, other than a <code>HandledError</code>, a <code>UnhandledError</code> with status <code>Internal Server Error</code> is sent back to the caller.</p><p>A guard should not change values and does not return a value.</p>`,42),h=[t];function l(r,d,p,o,c,k){return i(),s("div",null,h)}const u=a(n,[["render",l]]);export{E as __pageData,u as default};
